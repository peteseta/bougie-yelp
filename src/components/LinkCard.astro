---
interface Props {
  url: string;
}

const { url } = Astro.props;

async function isValidImageUrl(url: string) {
  try {
    const response = await fetch(url, { method: 'HEAD' });
    const contentType = response.headers.get('content-type');
    return contentType?.startsWith('image/');
  } catch {
    return false;
  }
}

async function fetchMetadata(url: string) {
  try {
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; LinkPreviewBot/1.0)',
      },
    });
    const html = await response.text();
    
    // Basic metadata extraction using regex
    const titleMatch = html.match(/<title[^>]*>([^<]+)<\/title>/i);
    const descriptionMatch = html.match(/<meta[^>]*name="description"[^>]*content="([^"]*)"[^>]*>/i) 
      || html.match(/<meta[^>]*content="([^"]*)"[^>]*name="description"[^>]*>/i)
      || html.match(/<meta[^>]*property="og:description"[^>]*content="([^"]*)"[^>]*>/i);
    const imageMatch = html.match(/<meta[^>]*property="og:image"[^>]*content="([^"]*)"[^>]*>/i)
      || html.match(/<meta[^>]*content="([^"]*)"[^>]*property="og:image"[^>]*>/i);
    const faviconMatch = html.match(/<link[^>]*rel="icon"[^>]*href="([^"]*)"[^>]*>/i)
      || html.match(/<link[^>]*href="([^"]*)"[^>]*rel="icon"[^>]*>/i);

    // Convert relative URLs to absolute URLs
    const baseUrl = new URL(url);
    const getAbsoluteUrl = (relativeUrl: string) => {
      if (!relativeUrl) return '';
      try {
        return new URL(relativeUrl, baseUrl).toString();
      } catch {
        return relativeUrl;
      }
    };

    const imageUrl = getAbsoluteUrl(imageMatch?.[1] || '');
    const hasValidImage = imageUrl ? await isValidImageUrl(imageUrl) : false;
    
    return {
      title: titleMatch?.[1] || '',
      description: descriptionMatch?.[1] || '',
      image: hasValidImage ? imageUrl : '',
      favicon: getAbsoluteUrl(faviconMatch?.[1] || '/favicon.ico'),
      url
    };
  } catch (error) {
    console.error('Error fetching metadata:', error);
    return {
      title: new URL(url).hostname,
      description: '',
      image: '',
      favicon: '/favicon.ico',
      url
    };
  }
}

const metadata = await fetchMetadata(url);
---

<a
  href={url}
  target="_blank"
  rel="noopener noreferrer"
  class="group block rounded border border-skin-line bg-skin-card/50 px-5 py-5 mb-8 transition-[border-color] hover:border-skin-accent !underline-offset-[3px]"
>
  <div class="flex gap-6">
    {metadata.image && (
      <div class="flex-shrink-0">
        <img
          src={metadata.image}
          alt=""
          class="h-24 w-24 rounded border border-skin-line object-cover"
        />
      </div>
    )}
    <div class="flex-grow">
      <div class="flex flex-col">
        <span class="text-xs font-light text-skin-base opacity-50 -mb-7">via:</span>
        <h3 class="font-medium text-skin-accent decoration-dashed !underline-offset-[3px] group-hover:underline">
          {metadata.title || new URL(url).hostname}
        </h3>
      </div>
      {metadata.description && (
        <p class="mt-2 text-sm text-skin-base opacity-90 line-clamp-2">
          {metadata.description}
        </p>
      )}
      <div class="mt-2.5 flex items-center gap-2 text-sm text-skin-base opacity-75">
        <span class="flex items-center gap-1.5">
          {metadata.favicon && (
            <img
              src={metadata.favicon}
              alt=""
              class="h-3.5 w-3.5"
              onerror="this.style.display='none'"
            />
          )}
          <span>{new URL(url).hostname}</span>
        </span>
        <span>â†—</span>
      </div>
    </div>
  </div>
</a>
